@using Sandbox;
@using Sandbox.UI;
@using System;
@using Sandbox.GameLogic.Modules;
@using System.Collections.Generic;

@namespace HideAndSeek
@inherits PanelComponent

<root>
    @{
        if (Input.EscapePressed)
            Hide = !Hide;
    }
    <div style="flex-direction: column; @(Hide == false ? "display: flex;" : "display: none;")">
        <div class="game_ui" style="opacity: @Opacity; gap: 5vw;">
            <div class="game_timer" style="@(ShowTimer == true ? "opacity: 1;" : "opacity: 0;")">
                <div style="flex-direction: row; justify-content: center; font-size: 3.5vh; width: 70%">
                    <div style="justify-content: center; width: 50%">@($"{CurrentTimeMinutes:00}")</div>
                    <div style="font-weight: bold; justify-content: center; width: 50%">@($"{CurrentTimeSecs:00}")</div>
                </div>
            </div>
        </div>
        <div class="info" style="@(StartEventGoing == true ? "display:flex; opacity: 1;" : "display:none; opacity: 0;") flex-direction: column;">
            <div class="message">@Message</div>
            <div class="message" style="@(Countdown == true ? "display:flex; opacity: 1;" : "display:none; opacity: 0;") background-color: #0e0e0ebd; box-shadow: 0px 0px 1vh 0.25vh #0e0e0ebd; border-radius: 100%; backdrop-filter: blur(5vh); height: 15vh; justify-content: center; align-items: center; aspect-ratio: 1;">
                @(Math.Round(Math.Max(SharedInfo.PreparationTime - SharedInfo.Timer, 0)))
            </div>
        </div>
    </div>
</root>

@code
{
    [Property] public SyncComponent SharedInfo { get; set; }
    [Property] public int CurrentTimeSecs { get { if (SharedInfo is null) return 0; return (int)(Math.Max(SharedInfo.MaxTime - SharedInfo.Timer, 0) % 60); } }
    [Property] public int CurrentTimeMinutes { get { if (SharedInfo is null) return 0; return (int)(Math.Max(SharedInfo.MaxTime - SharedInfo.Timer, 0) / 60); } }
    [Property] public List<Guid> Seekers { get { if (SharedInfo is null || SharedInfo.Seekers is null) return new List<Guid>(); return SharedInfo.Seekers; } }
    [Property] public List<Guid> Hiders { get { if (SharedInfo is null || SharedInfo.Hiders is null) return new List<Guid>(); return SharedInfo.Hiders; } }
    private float Opacity { get {  if (SharedInfo is not null) return Convert.ToInt32(SharedInfo.IsStarted); return 0; } }
    [Sync] private string Message { get; set; }
    [Sync] private bool StartEventGoing { get; set; }
    [Sync] private bool Countdown { get; set; } = false;
    [Sync] private bool ShowTimer { get; set; } = false;
    private bool Hide { get; set; } = false;

    private string GetFullTime()
    {
        return $"{CurrentTimeMinutes:00} : {CurrentTimeSecs:00}";
    }

    private async void StartRound()
    {
        StartEventGoing = true;
        Countdown = true;
        Message = $"Get Ready!";

        await Task.DelayRealtimeSeconds(SharedInfo == null ? 5 : SharedInfo.PreparationTime);
        ShowTimer = true;
        Countdown = false;
        StartEventGoing = false;
    }

    private async void RoundEnd(Team loser)
    {
        StartEventGoing = true;
        ShowTimer = false;
        Message = "Team " + loser.Name + " has lost!";

        await Task.DelayRealtimeSeconds(SharedInfo == null ? 5 : SharedInfo.RoundCooldown);
        StartEventGoing = false;
    }

    protected override void OnTreeFirstBuilt()
    {
        SharedInfo.CurrentGame.OnRoundStart += StartRound;
        SharedInfo.CurrentGame.OnTeamLost += RoundEnd;
    }

    /// <summary>
    /// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
    /// </summary>
    protected override int BuildHash() => System.HashCode.Combine(CurrentTimeSecs, CurrentTimeMinutes, Opacity, StartEventGoing, Message, Input.EscapePressed);
}
