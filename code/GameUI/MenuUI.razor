@using Sandbox;
@using Sandbox.UI;
@using System;
@using System.Collections.Generic;
@using Sandbox.GameLogic.Modules;
@using System.Threading;

@namespace HideAndSeek
@inherits PanelComponent
<root style="@(Loading == false ? "justify-content: space-between;" : "justify-content: center;")">
    @if(!Loading){
        <div class="menu">
            <TestingUI class="title" Texture=@LogoTexture></TestingUI>
            <div class="button-container">
                <div style="flex-direction: column;">
                    <button onclick=@(Create) class="ui-button">CREATE GAME</button>
                    <button onclick=@(Browser) class="ui-button" style="min-width: 375px;">
                        <i>travel_explore</i><div>SERVER BROWSER</div>
                    </button>
                    <button onclick=@(Exit) class="ui-button" style="margin-top: 4vh;">QUIT</button>
                </div>
            </div>
        </div>
        <div class="browser-menu" style="@(BrowserState == true ? "display:flex; opacity: 1;" : "display:none; opacity: 0;")">
            <div class="browser-header" style="@((Lobbies == null || Lobbies.Count < 1) ? "display:flex;" : "display:none;")  flex-direction: column; align-self: center; justify-content: center; font-size: 4vh; font-weight: normal; height: 100%;">
                <div>
                    <h>@(Status == true ? "Updating..." : "Empty")</h>
                    <i style="align-self:center; @(Status == false ? "display:flex;" : "display:none;")">sentiment_very_dissatisfied</i>
                </div>
            </div>
            <div class="browser-header" style="@((Lobbies != null && Lobbies.Count > 0) ? "display:flex;" : "display:none;") flex-direction: row; justify-content: space-between; align-items: center;">
                <div style="width: 10vw; max-width: 200px; overflow-x: hidden;"> <i style="align-items: center;">badge</i> Name </div>
                <div>
                    <i style="align-items: center;">perm_identity</i> Players
                </div>
                <div style="width: 20vw; max-width: 350px; overflow-x: hidden;"> <i style="align-items: center;">location_city</i> Map </div>
            </div>
            <div style="flex-direction: column; overflow-y: scroll;">
            @if (Lobbies != null && Lobbies.Count > 0)
            {
                for (int i = 0; i < Lobbies.Count; i++)
                {
                    <button id=@(i.ToString()) onclick=@(x => Join(x.Target.Id)) class="browser-button">
                        <div style="width: 10vw; max-width: 200px; overflow-x: hidden;"> @Lobbies[i].Name  </div>
                        <div>@Lobbies[i].Members/@Lobbies[i].MaxMembers</div>
                        <div style="width: 20vw; max-width: 350px; overflow-x: hidden;">@Lobbies[i].Map</div>
                    </button>
                }
            }
            </div>
        </div>
        <div class="browser-menu" style="@(CreateState == true ? "display:flex; opacity: 1;" : "display:none; opacity: 0;")">
            <div class="browser-header" style="flex-direction: row; justify-content: space-between; align-items: center; margin-bottom: 5vh;">
                <div style="align-items:center; justify-content: space-between; width: 100%;">
                    <div style="gap: 5vw;">
                        <TextEntry MaxLength=@(20) class="search-entry" @ref="Entry" onsubmit=@SubmitText />
                        <button class="browser-input-button" style="align-items:center;" onclick=@SubmitText><i>search</i></button>
                    </div>
                    <div style="font-size: 1.5vmin; font-weight: normal">
                        @if(SelectedMap != "")
                        {
                            <div>Selected: @(SelectedMap)</div>
                        }
                        </div>
                    <button class="browser-input-button" style="align-items:center; background-color: dodgerblue; 	box-shadow: 0px 0px 2vh 1vh dodgerblue;" onclick=@Play>
                        <i>play_arrow</i>
                    </button>
                </div>
            </div>
            <div class="maps-panel">
                @if(MapsFound != null && MapsFound.Length > 0)
                {
                    for (int i = 0; i < MapsFound.Length; i++)
                    {
                        <button class="browser-block" id=@(i.ToString()) onclick=@(x => {Select(x.Target);} ) style="background-image: url(@MapsFound[i].Thumb);"></button>
                    }
                }
            </div>
        </div>
    }
    else
    {
        <div class="loading">
            <div class="browser-block" style="@(GetMapThumb())">
            </div>
            <div style="flex-direction: column">
                Downloading: <br />
                @if(CurrentMap != null)
                {
                    <div>@(CurrentMap.FullIdent)</div>
                }
            </div>
            <button class="browser-input-button" onclick=@(() => CancelAsyncOperation(MapLoadCancelSrc)) style="background-color: red;	 box-shadow: 0px 0px 2vh 1vh red; width: 8vh; align-items: center; font-size: 5vh; border-radius: 100%;">
                <i>close</i>
            </button>
        </div>
    }
</root>

@code
{
    [Property] private LogoComponent Logo { get; set; }
    private CancellationTokenSource MapLoadCancelSrc;
    private CancellationToken MapLoadCancel;
    private bool Loading = false;
    private Texture LogoTexture { get { if (Logo.LogoTexture is null) Log.Info("Damn!"); return Logo.LogoTexture;} }
    private List<Sandbox.Network.LobbyInformation> Lobbies;
    private Package[] MapsFound;
    private Package CurrentMap;
    private TextEntry Entry;
    private bool BrowserState = false;
    private bool CreateState = false;
    private bool Status = true;
    private string MapQuery;
    private string SelectedMap;
    private Panel PrevButton;
    private GameSettings _settings = new();

    private void SubmitText()
    {
        if (Entry != null)
        {
            MapQuery = Entry.Value;
        }
        Log.Info(MapQuery);
        FetchMaps(MapQuery);
    }

    private async void FetchMaps(string query = "")
    {
        string searchMap = "type:map " + query;
        var found = await Package.FindAsync(searchMap);
        MapsFound = found.Packages;
        StateHasChanged();
        Log.Info("Maps found: " + MapsFound.Length);
    }

    private string GetMapThumb()
    {
        if(CurrentMap != null)
            return "background-image: url(" + CurrentMap.Thumb + ")";

        return "background-color: white";
    }



    private void Select(Panel button)
    {
        if(PrevButton != null)
        {
            PrevButton.Style.BorderWidth = Length.ViewHeight(0);
            PanelTransform scale = new();
            scale.AddScale(1f);
            PrevButton.Style.Transform = scale;
            PrevButton.Style.BoxShadow.Clear();
        }
        if (PrevButton == button)
        {
            PrevButton = null;
            SelectedMap = "";
            return;
        }
        else
        {
            SelectedMap = MapsFound[Convert.ToInt32(button.Id)].FullIdent;
            Log.Info(SelectedMap);
            button.Style.BorderWidth = Length.ViewHeight(1);
            button.Style.BoxShadow.Add(new Shadow() { Color = Color.White, OffsetX = 0, OffsetY = 0, Blur = 2, Spread = 1 });
            PanelTransform scale = new();
            scale.AddScale(0.95f);
            button.Style.Transform = scale;
            PrevButton = button;
            Clipboard.SetText(SelectedMap);
        }
    }

    private void CancelAsyncOperation(CancellationTokenSource token)
    {
        if (token != null && !token.IsCancellationRequested)
        {
            token.Cancel();
            Loading = false;
        }
    }

    //TODO: Create loading screen for map downloading.
    private async void Play()
    {
        _settings.MapName = SelectedMap;
        _settings.SaveSettings();

        CurrentMap = await Package.Fetch(SelectedMap, false);
        Loading = true;
        StateHasChanged();

        var mapMount = CurrentMap.MountAsync();
        MapLoadCancelSrc = new();
        MapLoadCancel = MapLoadCancelSrc.Token;
        MapLoadCancel.Register(() => Log.Info("Task is canceled"));
        Log.Info("Waiting for the mount");
        await mapMount.WaitAsync(MapLoadCancel);

        Loading = false;
        StateHasChanged();

        if (!MapLoadCancel.IsCancellationRequested)
            Game.ActiveScene.LoadFromFile("scenes/playing_scene_zero.scene");
    }

    private void Create()
    {
        CreateState = !CreateState;
        BrowserState = false;
        if(CreateState)
            FetchMaps();
    }




    private async void Browser()
    {
        CreateState = false;
        BrowserState = !BrowserState;
        if (BrowserState)
        {
            Status = true;

            Lobbies = await Networking.QueryLobbies("purpeliz.hide_seek_updated");
            await Task.DelayRealtimeSeconds(10);
            if (Lobbies is null || Lobbies.Count < 1)
            {
                Status = false;
            }
            Log.Info("Servers: " + Lobbies.Count);
        }
    }

    private void Join(string id)
    {
        int serverId = Convert.ToInt32(id);
        Sandbox.Network.GameNetworkSystem.Connect(Lobbies[serverId].LobbyId);
        Log.Info(Sandbox.Network.GameNetworkSystem.IsConnecting);
    }




    private void Exit()
    {
        Game.Disconnect();
        Game.ActiveScene.Destroy();
        Game.Close();
    }

    /// <summary>
    /// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
    /// </summary>
    protected override int BuildHash() => System.HashCode.Combine(LogoTexture, Status);
}
